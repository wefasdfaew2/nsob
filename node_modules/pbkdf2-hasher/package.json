{
  "name": "pbkdf2-hasher",
  "description": "Password hashing and verification for Node using the built-in crypto.pbkdf2 (HMAC-SHA1).",
  "version": "0.0.1",
  "author": {
    "name": "Mike M. Lin",
    "email": "mike@mpeak.co"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/mpeak/pbkdf2-hasher.git"
  },
  "dependencies": {
    "btoa": ">= 1.1.0"
  },
  "engines": {
    "node": ">= 0.5.5"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "keywords": [
    "pbkdf2",
    "hasher",
    "hash",
    "password"
  ],
  "readme": "pbkdf2-hasher\n=============\n\nPassword hashing and verification for Node using the built-in crypto.pbkdf2 (HMAC-SHA1).\n\nThe number of iterations is fixed to 10,000. The salt is a randomly-generated 160-bit value.\nBoth the salt and password hash are represented in base64 so the combined hash can be stored\nas a string and easily saved (e.g. to a database).\n\n# Installation\n\n    $ npm install pbkdf2-hasher\n\n# Usage\n\nBoth generating and verifying the hash take an async callback, because PBKDF2 is meant\nto take a significant time to process.\n\n## Generating a hash\n\n    var hasher = require('pbkdf2-hasher');\n    hasher.generate('mypassword', function(err, hash) {\n        // `hash` has the format \"algorithm$iterations$salt$hash\".\n    });\n\n## Verifying a hash\n\n\tvar hasher = require('pbkdf2-hasher');\n    hasher.verify('mypassword', 'myhash', function(err, verified) {\n        // `verified` is true or false.\n    });\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mpeak/pbkdf2-hasher/issues"
  },
  "_id": "pbkdf2-hasher@0.0.1",
  "dist": {
    "shasum": "9ff60cb40f1074697c43ce938860e77dff3b2383"
  },
  "_from": "pbkdf2-hasher@0.0.x",
  "_resolved": "https://registry.npmjs.org/pbkdf2-hasher/-/pbkdf2-hasher-0.0.1.tgz"
}
